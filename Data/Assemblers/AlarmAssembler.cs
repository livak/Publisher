//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2013.07.14 - 16:59:49
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using PowerMonitoring.Data;

namespace PowerMonitoring.Data
{

    /// <summary>
    /// Assembler for <see cref="Alarm"/> and <see cref="AlarmDto"/>.
    /// </summary>
    public static partial class AlarmAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="AlarmDto"/> converted from <see cref="Alarm"/>.</param>
        static partial void OnDTO(this Alarm entity, AlarmDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Alarm"/> converted from <see cref="AlarmDto"/>.</param>
        static partial void OnEntity(this AlarmDto dto, Alarm entity);

        /// <summary>
        /// Converts this instance of <see cref="AlarmDto"/> to an instance of <see cref="Alarm"/>.
        /// </summary>
        /// <param name="dto"><see cref="AlarmDto"/> to convert.</param>
        public static Alarm ToEntity(this AlarmDto dto)
        {
            if (dto == null) return null;

            var entity = new Alarm();

            entity.AlarmId = dto.AlarmId;
            entity.Active = dto.Active;
            entity.Acknowledged = dto.Acknowledged;
            entity.AlarmLevelName = dto.AlarmLevelName;
            entity.MaxValue = dto.MaxValue;
            entity.SetTime = dto.SetTime;
            entity.MaxValueTime = dto.MaxValueTime;
            entity.DeactivatedTime = dto.DeactivatedTime;
            entity.SetPoint = dto.SetPoint;
            entity.Priority = dto.Priority;
            entity.VariableId = dto.VariableId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Alarm"/> to an instance of <see cref="AlarmDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="Alarm"/> to convert.</param>
        public static AlarmDto ToDTO(this Alarm entity)
        {
            if (entity == null) return null;

            var dto = new AlarmDto();

            dto.AlarmId = entity.AlarmId;
            dto.Active = entity.Active;
            dto.Acknowledged = entity.Acknowledged;
            dto.AlarmLevelName = entity.AlarmLevelName;
            dto.MaxValue = entity.MaxValue;
            dto.SetTime = entity.SetTime;
            dto.MaxValueTime = entity.MaxValueTime;
            dto.DeactivatedTime = entity.DeactivatedTime;
            dto.SetPoint = entity.SetPoint;
            dto.Priority = entity.Priority;
            dto.VariableId = entity.VariableId;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="AlarmDto"/> to an instance of <see cref="Alarm"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Alarm> ToEntities(this IEnumerable<AlarmDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Alarm"/> to an instance of <see cref="AlarmDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<AlarmDto> ToDTOs(this IEnumerable<Alarm> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
