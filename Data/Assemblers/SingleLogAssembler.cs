//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2013.07.14 - 16:59:50
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using PowerMonitoring.Data.Dto;
using PowerMonitoring.Data.Poco;

namespace PowerMonitoring.Data.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="SingleLog"/> and <see cref="SingleLogDto"/>.
    /// </summary>
    public static partial class SingleLogAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="SingleLogDto"/> converted from <see cref="SingleLog"/>.</param>
        static partial void OnDTO(this SingleLog entity, SingleLogDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="SingleLog"/> converted from <see cref="SingleLogDto"/>.</param>
        static partial void OnEntity(this SingleLogDto dto, SingleLog entity);

        /// <summary>
        /// Converts this instance of <see cref="SingleLogDto"/> to an instance of <see cref="SingleLog"/>.
        /// </summary>
        /// <param name="dto"><see cref="SingleLogDto"/> to convert.</param>
        public static SingleLog ToEntity(this SingleLogDto dto)
        {
            if (dto == null) return null;

            var entity = new SingleLog();

            entity.SingleLogId = dto.SingleLogId;
            entity.SingleValue = dto.SingleValue;
            entity.TimeStamp = dto.TimeStamp;
            entity.VariableId = dto.VariableId;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="SingleLog"/> to an instance of <see cref="SingleLogDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="SingleLog"/> to convert.</param>
        public static SingleLogDto ToDTO(this SingleLog entity)
        {
            if (entity == null) return null;

            var dto = new SingleLogDto();

            dto.SingleLogId = entity.SingleLogId;
            dto.SingleValue = entity.SingleValue;
            dto.TimeStamp = entity.TimeStamp;
            dto.VariableId = entity.VariableId;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="SingleLogDto"/> to an instance of <see cref="SingleLog"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<SingleLog> ToEntities(this IEnumerable<SingleLogDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="SingleLog"/> to an instance of <see cref="SingleLogDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<SingleLogDto> ToDTOs(this IEnumerable<SingleLog> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
