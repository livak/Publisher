//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2013.07.14 - 16:59:51
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using PowerMonitoring.Data.Dto;
using PowerMonitoring.Data.Poco;

namespace PowerMonitoring.Data.Assemblers
{

    /// <summary>
    /// Assembler for <see cref="Variable"/> and <see cref="VariableDto"/>.
    /// </summary>
    public static partial class VariableAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="VariableDto"/> converted from <see cref="Variable"/>.</param>
        static partial void OnDTO(this Variable entity, VariableDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="Variable"/> converted from <see cref="VariableDto"/>.</param>
        static partial void OnEntity(this VariableDto dto, Variable entity);

        /// <summary>
        /// Converts this instance of <see cref="VariableDto"/> to an instance of <see cref="Variable"/>.
        /// </summary>
        /// <param name="dto"><see cref="VariableDto"/> to convert.</param>
        public static Variable ToEntity(this VariableDto dto)
        {
            if (dto == null) return null;

            var entity = new Variable();

            entity.VariableId = dto.VariableId;
            entity.Name = dto.Name;
            entity.Type = dto.Type;
            entity.DataLoggingEnabled = dto.DataLoggingEnabled;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="Variable"/> to an instance of <see cref="VariableDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="Variable"/> to convert.</param>
        public static VariableDto ToDTO(this Variable entity)
        {
            if (entity == null) return null;

            var dto = new VariableDto();

            dto.VariableId = entity.VariableId;
            dto.Name = entity.Name;
            dto.Type = entity.Type;
            dto.DataLoggingEnabled = entity.DataLoggingEnabled;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="VariableDto"/> to an instance of <see cref="Variable"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<Variable> ToEntities(this IEnumerable<VariableDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="Variable"/> to an instance of <see cref="VariableDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<VariableDto> ToDTOs(this IEnumerable<Variable> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
